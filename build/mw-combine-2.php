<?php


// ========
// Globals


$keyword = $argv[1] ?? 'kicksecure'; // Keyword passed from command line or default

$output = '';
$errors = 0;
$logFile = './build-log.htm';
$warningStyle = 'style="color: red; font-weight: bold"';
$linebreakX4 = "\n\n\n\n";

$buildFilePath = "./{$keyword}-build.json";
$fileSrcPath = "../src/{$keyword}";
$fileAutogenPath = "../dist/{$keyword}"; // Target directory
$fileAutogenServerPath = '/mw-autogen'; // Autogen folder url path

$filePrefix = '/mw-combined-';

$generaljswrapper;


// =========
// Functions


// -----------------------
// Function : out (helper)


function out( string $text, bool $isError = false, string $altElement = '' ): void {
  global $output, $warningStyle;
  $output .= '<' . ( $altElement ?: 'p' ) . ( $isError ? " {$warningStyle}" : '' ) . '>' . $text . '</' . ( $altElement ?: 'p' ) . '>';
}

// ------------------------------
// Function : execHelper (helper)


function execHelper( string $command, bool $verbose = false ) : string {
    global $errors, $errorLogFilePath;
    out( 'Executing command: ' . $command );
    exec( $command . " 2>&1", $output, $retval );
    $errors += ( $retval == 0 ? 0 : 1 );
    out( 'Exit code: ' . $retval . "\n" . 'output: ' . ( $verbose
        ? '"' . implode( '<br>', $output ) . '"'
        :  '[has ' . strlen( implode( '', $output ) ) . ' chars]'
      ),
      $retval != 0
    );
    return implode( "\n", $output );
  }


// ------------------
// Function : Combine


function combineFiles(string $type, array $build, bool $doCombine = true): void {
  global $errors, $fileAutogenPath, $fileAutogenServerPath, $filePrefix, $generaljswrapper, $linebreakX4;

  // Reusable elements
  
  $headlineStart = '/* === ';
  $headlineEnd = ' ================================================== */';
  
  // Start combining
  
  if( $doCombine ) out( 'CREATING combined file, minified version and copies of source files for build["' . $type . '"]', false, 'h2' );
  else out( 'CREATING copies of source files for build["' . $type . '"]', false, 'h2' );

  // Start with info about mw-combine.php
  $combined = $headlineStart . 'mw-combine.php : This file is autogenerated with "' . $type . '" from MediaWiki:Build.json' . $headlineEnd;

  // Adding JavaScript specific condition (especially adding Common.js-trigger and dontload functionality for performance testing)
  if( $type == 'wikijs' ) {
    $combined .= ''
      . $linebreakX4 . $headlineStart
      . 'mw-combine.php : This wrapper is auto-generated to make all JavaScript wait for this event'
      . $headlineEnd . $linebreakX4
      . $generaljswrapper[0]
    ;
  }

  // Add the content from each file and save a copy
  
  if( ! is_array( $build[ $type ] ) ) {
  	$errors++;
		out( "Error in build.json : The value tab sizefor keyword '$type' is not but must be an array.", true );
	} else {
	
		foreach( $build[ $type ] as $wikiFileName ) {
		  if( ! is_string( $wikiFileName ) || preg_match( '/^\/\//', $wikiFileName ) ) continue;

		  $combined .= ''
		    . $linebreakX4 . $headlineStart
		    . $wikiFileName
		    . $headlineEnd . $linebreakX4

	    ;
		  $fileTextContent = execHelper( 'php /var/www/public/wiki/w/maintenance/getText.php "' . $wikiFileName . '"' );

		  // Adding File content with JavaScript specific condition (if-clause)
		  $combined .= ''
		    . ( $type == 'wikijs' ? "if( mwDev.data.log.jsload['$wikiFileName'] !== false ) {\n\n" : '' )
		    . $fileTextContent
		    . ( $type == 'wikijs' ? "\n\nmwDev.data.log.jsload['$wikiFileName'] = true;\n\n\n}" : '' );

		  // Copy each file to autogen src-copy folder for other use cases
		  $pathSrcCopyDir = $fileAutogenPath . '/src-copy/';
		  
		  // Try to create dir if necessary. Only if successful create files
		  
		  if( ! file_exists( $pathSrcCopyDir ) ) mkdir( $pathSrcCopyDir, 0755 );
		  
      if( ! file_exists( $pathSrcCopyDir ) ) {
      	$errors++;
		    out( "Error in autogen folder : The subfolder 'src-copy' does not exist and could not be created.", true );
      } else {
      
        // Create file and minified version in source copy path from wiki file
        $filePath = $pathSrcCopyDir . preg_replace( '/(MediaWiki)?:/i', '', $wikiFileName );
        $filePathMin = preg_replace( '/\.(\w+)$/', '.min.$1', $filePath );
        file_put_contents( $filePath, $fileTextContent );
        execHelper( 'minify --output "' . $filePathMin . '" "' . $filePath . '"' );
        
      }
		}
		
  }
  
  
  // +++ Skip combine part of function IF doCombine is false +++
  if( ! $doCombine ) return;
  

  // Adding JavaScript specific condition
  if( $type == 'wikijs' ) {
    $combined .= ''
      . $linebreakX4 . $headlineStart
      . 'mw-combine.php : End of auto-generated wrapper function for all JavaScript'
      . $headlineEnd . $linebreakX4
      . $generaljswrapper[1];
  }

  // Adding info that autogeneration has been completed
  $combined .= $linebreakX4 . $headlineStart . 'mw-combine.php : Autogeneration success' . $headlineEnd . $linebreakX4;

  // Save combined file and save again as minified file

  $fileExtension = $type == 'wikijs' ? '.js' : '.css';
  $fileOriginalPath = $fileAutogenPath . $filePrefix . $type . $fileExtension;
  $fileMinified = $filePrefix . $type . '.min' . $fileExtension;
  $fileMinifiedPath = $fileAutogenPath . $fileMinified;
  $fileMinifiedUrl = $fileAutogenServerPath . $fileMinified;

  file_put_contents( $fileOriginalPath, $combined );
  
  if( $type == 'wikijs' )
    execHelper( "uglifyjs '$fileOriginalPath' --output '$fileMinifiedPath' --source-map \"base='$fileAutogenPath',root='$fileAutogenServerPath',url='$fileMinifiedUrl.map'\"", true );
  else
    execHelper( "minify --output '$fileMinifiedPath' '$fileOriginalPath'", true );
}


// =======
// Execute


out('Loading Script ...', false, 'h2');

// Load and parse Build json for the given keyword

$build = json_decode(file_get_contents($buildFilePath), true) ?: [];
$generaljswrapper = isset($build['generaljswrapper']) ? explode('/*WRAPPEDCONTENT*/', execHelper('php /var/www/public/wiki/w/maintenance/getText.php "' . $build['generaljswrapper'] . '"')) : ['', ''];

// Combine files according to Build.json
foreach (['wikijs', 'wikicss', 'skincss', 'justcopy'] as $type) {
    combineFiles($type, $build, $type !== 'justcopy');
}

out('Success: Script completed!', false, 'h2');

// Output

file_put_contents(  $logFile, ''
  . '<h1' . ( $errors > 0 ? " {$warningStyle}" : '' ) . ">{$keyword} wiki BUILD : " . ( $errors > 0 ? "{$errors} ERRORS!" : 'SUCCESS' ). "</h1>{$linebreakX4}}"
  . $output
  . "{$linebreakX4}<div><br><br><hr><hr><br><br></div>{$linebreakX4}",
  FILE_APPEND );

